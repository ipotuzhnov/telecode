#!/usr/bin/env node

'use strict'
const express   = require('express')
const app       = express()
const http      = require('http').Server(app)
const io        = require('socket.io')(http)
const path      = require('path')

const DIR = path.resolve(process.env.DIR || `/tmp/nodeist-colony-${Date.now()}`)

const rooms = {}
async function start () {
    console.log(`Initializing database in directory ${DIR}`)
    const connectedSockets = {}
    
    io.on('connection', async socket => {
        console.log(`${socket.id} connected`)
        connectedSockets[socket.id] = socket

        socket.on('room', ({ room, gitter }) => {
            if (!rooms[room]) {
                rooms[room] = {
                    commits: [],
                    gitters: {}
                }
            }
            if (gitter) {
                rooms[room].gitters[socket.id] = socket.id
            }

            socket.on('disconnect', () => {
                delete rooms[room].gitters[socket.id]
            })

            socket.join(room)

            socket.on('reset', () => {
                rooms[room].commits = []
                io.to(room).emit('reset')
            })
            socket.on('commit', data => {
                console.log(`got commit for ${data.author} size ${data.diff && data.diff.length}`)
                rooms[room].commits.push(data)
                io.to(room).emit('change', Object.assign({
                    gitter: socket.id
                }, data))
            })
            socket.on('replay', () => {
                socket.emit('replay', rooms[room].commits)
            })

            
            socket.on('file_retrieved', data => {
                // data = { requestId, name, content }
                socket.broadcast.to(room).emit('file_retrieved', data)
            })

            // send a private messages to gitters
            // socket.to(id).emit('my message', msg);
            socket.on('retrieve_file', (data, cb) => {
                // data = { requestId, name }
                // pick a gitter
                const gitters = Object.keys(rooms[room].gitters)
                if (gitters.length === 0) {
                    return cb(`No gitters available in the "${room}" room`)
                }

                // ask just one gitter for the file
                const gitter = gitters[0]
                socket.to(gitter).emit('retrieve_file', data)
                console.log(`Retrieving file ${data.name} from gitter ${gitter}`)
                cb(null, { gitter })
            })
            socket.on('file_changed', (data, cb) => {
                // data = { name, content }
                // pick a gitter
                const gitters = Object.keys(rooms[room].gitters)
                if (gitters.length === 0) {
                    return cb(`No gitters available in the "${room}" room`)
                }

                // ask just one gitter to apply the change
                const gitter = gitters[0]
                console.log(`file changed ${data.name} size ${data.content && data.content.length}`)
                socket.to(gitter).emit('file_changed', data)
                console.log(`Applying changes ${data.name} on gitter ${gitter}`)
                cb(null, { gitter })
            })
            socket.emit('joined')
        })
    })
    
    app.use(express.static('public'))
    app.use('/node_modules', express.static('node_modules'))
    
    const PORT = process.env.PORT || 5000
    
    http.listen(PORT, () => console.log(`Listening on ${PORT}`))
}

start()
    .catch(e => {
        console.error(e)
    })
