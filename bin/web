#!/usr/bin/env node

'use strict'
const express   = require('express')
const app       = express()
const http      = require('http').Server(app)
const io        = require('socket.io')(http)
const path      = require('path')
const DB        = require('../src/db')

const DIR = path.resolve(process.env.DIR || `/tmp/nodeist-colony-${Date.now()}`)

async function start () {
    const db = DB({dir: DIR})
    console.log(`Initializing database in directory ${DIR}`)
    await db.init()
    db.initGitServer()
    console.log('done initting')
    const connectedSockets = {}
    
    io.on('connection', async socket => {
        console.log(`${socket.id} connected`)
        connectedSockets[socket.id] = socket
        
        socket.on('commit', data => {
            console.log('got commit', data)
            io.emit('change', data)
        })
        socket.on('retrieve_file', async (data, callback) => {
            let file
            let error
            try {
                file = await db.readFile()
                console.log(`Emiting file after retrieval request ${JSON.stringify(file)}`)
            } catch (err) {
                error = err
            }
            callback(error, file)
        })
    })
    
    app.use(express.static('public'))
    app.use('/node_modules', express.static('node_modules'))
    
    const PORT = process.env.PORT || 5000
    
    http.listen(PORT, () => console.log(`Listening on ${PORT}`))
}

start()
    .catch(e => {
        console.error(e)
    })
